Mad-Assembler v1.6.9beta by TeBe/Madteam
Source: F:\!Atari\getris2\intro3\intro3_pack.asm
     1
     2 = 00,7000		dst	equ $7000
     3
     4 				 org $2000
     5
     6 				main
     7
     8 				 mwa #pack inputPointer
Macro: MWA [Source: f:\!atari\macro\xasm.mac]
    36 FFFF> 00,2000-3894> A9 +	      ldA <PACK
    37 00,2002 85 F0		      stA INPUTPOINTER
    38 00,2004 A9 23		      ldA >PACK
    39 00,2006 85 F1		      stA INPUTPOINTER+1
Source: F:\!Atari\getris2\intro3\intro3_pack.asm
     9 				 mwa #dst  outputPointer
Macro: MWA [Source: f:\!atari\macro\xasm.mac]
    36 00,2008 A9 00		      ldA <DST
    37 00,200A 85 F2		      stA OUTPUTPOINTER
    38 00,200C A9 70		      ldA >DST
    39 00,200E 85 F3		      stA OUTPUTPOINTER+1
Source: F:\!Atari\getris2\intro3\intro3_pack.asm
    10 00,2010 20 16 20		 jsr inflate
    11
    12 00,2013 4C 93 A2		 jmp $a290+3
    13
    14 00,2016			 icl 'inflate.asm'
Source: F:\!Atari\getris2\intro3\inflate.asm
     1 = 00,00F0		zpage	equ	$f0	; 11 bytes
     2
     3
     4 				* 'Inflate'
     5 				; Written by Piotr Fusik (a.k.a. Fox/Taquart)
     6 				; Purpose: to uncompress Deflate format compressed data on 6502-based system.
     7
     8 				* const
     9 				; Maximum length of a Huffman code
    10 = 00,000F		MAX_BITS      equ	15
    11 				; Index in bitsCount, bitsPointer_l and bitsPointer_h
    12 				; for temporary tree and literal/length tree
    13 = 00,0000		PRIMARY_TREE  equ	0
    14 				; Index in bitsCount, bitsPointer_l and bitsPointer_h for distance tree
    15 = 00,000F		DISTANCE_TREE equ	MAX_BITS
    16 				; Size of each of bitsCount, bitsPointer_l and bitsPointer_h
    17 = 00,001E		TREES_SIZE    equ	2*MAX_BITS
    18
    19 				* page zero
    20 				; (public) Pointer to compressed data
    21 = 00,00F0		inputPointer            equ	zpage    ; 2 bytes
    22 				; (public) Pointer to uncompressed data
    23 = 00,00F2		outputPointer           equ	zpage+2  ; 2 bytes
    24 				; Local variables
    25 = 00,00FA		getBit_hold             equ	zpage+10 ; 1 byte
    26
    27 = 00,00F4		inflateDynamicBlock_cnt equ	zpage+4  ; 1 byte
    28 = 00,00F4		inflateCodes_src        equ	zpage+4  ; 2 bytes
    29 = 00,00F4		buildHuffmanTree_src    equ	zpage+4  ; 2 bytes
    30 = 00,00F4		getNextLength_last      equ	zpage+4  ; 1 byte
    31 = 00,00F5		getNextLength_index     equ	zpage+5  ; 1 byte
    32
    33 = 00,00F6		buildHuffmanTree_ptr    equ	zpage+6  ; 2 bytes
    34 = 00,00F6		fetchCode_ptr           equ	zpage+6  ; 2 bytes
    35 = 00,00F6		getBits_tmp             equ	zpage+6  ; 1 byte
    36
    37 = 00,00F8		moveBlock_len           equ	zpage+8  ; 2 bytes
    38 = 00,00F8		inflateDynamicBlock_np  equ	zpage+8  ; 1 byte
    39 = 00,00F9		inflateDynamicBlock_nd  equ	zpage+9  ; 1 byte
    40
    41 				* code
    42 				*	org	inflate
    43 				* (public) inflate
    44 				; Decompress Deflate data pointed by inputPointer
    45 				; to memory at outputPointer
    46
    47 00,2016			inflate
    48 					mvy	#1	getBit_hold
Macro: MVY [Source: f:\!atari\macro\xasm.mac]
     5 00,2016 A0 01		 ldY #1
     6 00,2018 84 FA		 stY GETBIT_HOLD
Source: F:\!Atari\getris2\intro3\inflate.asm
Source: F:\!Atari\getris2\intro3\inflate.asm
    49 00,201A D0 03			bne	inflate_2	!
    50 00,201C			inflate_1
    51 00,201C 20 29 20			jsr	inflate_3
    52 00,201F			inflate_2
    53 				; Get a bit of EOF and two bits of block type
    54 00,201F A2 03			ldx	#3
    55 00,2021 A9 00			lda	#0
    56 00,2023 20 0F 22			jsr	getBits
    57 00,2026 4A			lsr	@
    58 00,2027 90 F3			bcc	inflate_1
    59 00,2029			inflate_3
    60 00,2029 D0 3A			bne	inflateCompressedBlock
    61
    62 				* inflateCopyBlock
    63 				; Decompress 'stored' data block
    64 00,202B			inflateCopyBlock
    65 				; Ignore bits until byte boundary
    66 					mvy	#1	getBit_hold
Macro: MVY [Source: f:\!atari\macro\xasm.mac]
     5 00,202B A0 01		 ldY #1
     6 00,202D 84 FA		 stY GETBIT_HOLD
Source: F:\!Atari\getris2\intro3\inflate.asm
Source: F:\!Atari\getris2\intro3\inflate.asm
    67 				; Get 16-bit length
    68 00,202F A2 F0			ldx	#inputPointer
    69 					mva	(0,x)	moveBlock_len
Macro: MVA [Source: f:\!atari\macro\xasm.mac]
     5 00,2031 A1 00		 ldA (0,x)
     6 00,2033 85 F8		 stA MOVEBLOCK_LEN
Source: F:\!Atari\getris2\intro3\inflate.asm
Source: F:\!Atari\getris2\intro3\inflate.asm
    70 					mva	(inputPointer),y	moveBlock_len+1
Macro: MVA [Source: f:\!atari\macro\xasm.mac]
     5 00,2035 B1 F0		 ldA (inputPointer),Y
     6 00,2037 85 F9		 stA MOVEBLOCK_LEN+1
Source: F:\!Atari\getris2\intro3\inflate.asm
Source: F:\!Atari\getris2\intro3\inflate.asm
    71 				; Skip length and one's complement length
    72 00,2039 A9 04			lda	#4
    73 					add:sta	inputPointer
    73 				 add	inputPointer
Macro: ADD [Source: f:\!atari\macro\xasm.mac]
    77 00,203B 18		 clc
    78 00,203C 65 F0		 adc INPUTPOINTER
Source: F:\!Atari\getris2\intro3\inflate.asm
    73 00,203E 85 F0		 sta	inputPointer
    74 					scc:inc	inputPointer+1
    74 00,2040 90 02		 scc$2044	inputPointer+1
    74 00,2042 E6 F1		 inc	inputPointer+1
    75
    76 				* moveBlock
    77 				; Copy block of length moveBlock_len from (0,x) to output
    78 00,2044			moveBlock
    79 00,2044 A4 F8			ldy	moveBlock_len
    80 00,2046 F0 04			beq	moveBlock_1
    81 00,2048 A0 00			ldy	#0
    82 00,204A E6 F9			inc	moveBlock_len+1
    83 00,204C			moveBlock_1
    84 					mva	(0,x)	(outputPointer),y
Macro: MVA [Source: f:\!atari\macro\xasm.mac]
     5 00,204C A1 00		 ldA (0,x)
     6 00,204E 91 F2		 stA (outputPointer),Y
Source: F:\!Atari\getris2\intro3\inflate.asm
Source: F:\!Atari\getris2\intro3\inflate.asm
    85 					inw	0,x
Macro: INW [Source: f:\!atari\macro\xasm.mac]
     5 00,2050 F6 00		 inc 0,X
     6 00,2052 D0 02		 bne skip
     7 00,2054 F6 01		 inc 0,X+1
     8 00,2056			skip
Source: F:\!Atari\getris2\intro3\inflate.asm
    86 					inw	outputPointer
Macro: INW [Source: f:\!atari\macro\xasm.mac]
     5 00,2056 E6 F2		 inc OUTPUTPOINTER
     6 00,2058 D0 02		 bne skip
     7 00,205A E6 F3		 inc OUTPUTPOINTER+1
     8 00,205C			skip
Source: F:\!Atari\getris2\intro3\inflate.asm
    87 00,205C C6 F8			dec	moveBlock_len
    88 00,205E D0 EC			bne	moveBlock_1
    89 00,2060 C6 F9			dec	moveBlock_len+1
    90 00,2062 D0 E8			bne	moveBlock_1
    91 00,2064 60			rts
    92
    93 				* inflateCompressedBlock
    94 				; Decompress Huffman-coded data block
    95 				; A = 1: fixed, A = 2: dynamic
    96 00,2065			inflateCompressedBlock
    97 00,2065 4A			lsr	@
    98 00,2066 D0 2C			bne	inflateDynamicBlock
    99
   100 				* inflateFixedBlock
   101 				; Decompress Huffman-coded data block with default Huffman trees:
   102 				; literalCodeLength	:144	dta 8
   103 				;			:112	dta 9
   104 				; endCodeLength		:24	dta 7
   105 				;			:6	dta 8
   106 				; distanceCodeLength	:30	dta 5+DISTANCE_TREE
   107 				;			:2	dta 8
   108 				; (two 8-bit codes from primary tree are not used)
   109 00,2068			inflateFixedBlock
   110 00,2068 A2 9F			ldx	#159
   111 00,206A 8E D3 39			stx	distanceCodeLength+32
   112 00,206D A9 08			lda	#8
   113 00,206F			inflateFixedBlock_1
   114 00,206F 9D 94 38			sta	literalCodeLength-1,x
   115 00,2072 9D 33 39 CA		sta	literalCodeLength+159-1,x-
   116 00,2076 D0 F7			bne	inflateFixedBlock_1
   117 00,2078 A2 70			ldx	#112
   118 					inc:rne	literalCodeLength+144-1,x-
   118 00,207A FE 24 39 CA	 inc	literalCodeLength+144-1,x-
   118 00,207E D0 FA		 rne$207A	literalCodeLength+144-1,x-
   119 00,2080 A2 18			ldx	#24
   120 					dec:rne	endCodeLength-1,x-
   120 00,2082 DE 94 39 CA	 dec	endCodeLength-1,x-
   120 00,2086 D0 FA		 rne$2082	endCodeLength-1,x-
   121 00,2088 A2 1E			ldx	#30
   122 00,208A A9 14			lda	#5+DISTANCE_TREE
   123 					sta:rne	distanceCodeLength-1,x-
   123 00,208C 9D B2 39 CA	 sta	distanceCodeLength-1,x-
   123 00,2090 D0 FA		 rne$208C	distanceCodeLength-1,x-
   124 00,2092 F0 71			beq	inflateCodes	!
   125
   126 				* inflateDynamicBlock
   127 				; Decompress Huffman-coded data block, reading Huffman trees first
   128 00,2094			inflateDynamicBlock
   129 				; numberOfPrimaryCodes = 257 + getBits(5)
   130 00,2094 A2 05			ldx	#5
   131 				;	lda	#1
   132 00,2096 20 0F 22			jsr	getBits
   133 00,2099 85 F8			sta	inflateDynamicBlock_np
   134 				; numberOfDistanceCodes = 1 + getBits(5)
   135 00,209B A2 05			ldx	#5
   136 00,209D A9 1F			lda	#1+29+1
   137 00,209F 20 0F 22			jsr	getBits
   138 00,20A2 85 F9			sta	inflateDynamicBlock_nd
   139 				; numberOfTemporaryCodes = 4 + getBits(4)
   140 					lda:tax	#4
   140 00,20A4 A9 04		 lda	#4
   140 00,20A6 AA		 tax	#4
   141 00,20A7 20 0F 22			jsr	getBits
   142 00,20AA 85 F4			sta	inflateDynamicBlock_cnt
   143 				; Get lengths of temporary codes in order stored in tempCodeLengthOrder
   144 					lda:tay	#0
   144 00,20AC A9 00		 lda	#0
   144 00,20AE A8		 tay	#0
   145 00,20AF			inflateDynamicBlock_1
   146 00,20AF A2 03			ldx	#3		; A = 0
   147 00,20B1 20 0F 22			jsr	getBits		; does not change Y
   148 00,20B4			inflateDynamicBlock_2
   149 00,20B4 BE 47 22			ldx	tempCodeLengthOrder,y
   150 00,20B7 9D 95 38			sta	literalCodeLength,x
   151 00,20BA A9 00			lda	#0
   152 00,20BC C8			iny
   153 00,20BD C4 F4			cpy	inflateDynamicBlock_cnt
   154 00,20BF 90 EE			bcc	inflateDynamicBlock_1
   155 00,20C1 C0 13			cpy	#19
   156 00,20C3 90 EF			bcc	inflateDynamicBlock_2
   157 00,20C5 6E A8 38			ror	literalCodeLength+19	+
   158 				; Build tree for temporary codes
   159 00,20C8 20 49 21			jsr	buildHuffmanTree
   160
   161 				; Use temporary codes to get lengths for literal/length and distance codes
   162 00,20CB A2 00			ldx	#0
   163 00,20CD A0 01			ldy	#1
   164 00,20CF 86 F4			stx	getNextLength_last
   165 00,20D1			inflateDynamicBlock_3
   166 00,20D1 20 BA 21			jsr	getNextLength
   167 00,20D4 9D 95 38 E8		sta	literalCodeLength,x+
   168 00,20D8 D0 F7			bne	inflateDynamicBlock_3
   169 00,20DA			inflateDynamicBlock_4
   170 00,20DA 20 BA 21			jsr	getNextLength
   171 00,20DD 9D 95 39 E8		sta	endCodeLength,x+
   172 00,20E1 E4 F8			cpx	inflateDynamicBlock_np
   173 00,20E3 90 F5			bcc	inflateDynamicBlock_4
   174 00,20E5 A9 00			lda	#0
   175 00,20E7 B0 04			bcs	inflateDynamicBlock_6	!
   176 00,20E9			inflateDynamicBlock_5
   177 00,20E9 9D 95 39 E8		sta	endCodeLength,x+
   178 00,20ED			inflateDynamicBlock_6
   179 00,20ED E0 1E			cpx	#1+29
   180 00,20EF 90 F8			bcc	inflateDynamicBlock_5
   181 00,20F1			inflateDynamicBlock_7
   182 00,20F1 20 BA 21			jsr	getNextLength
   183 00,20F4 C9 00			cmp	#0
   184 					seq:adc	#DISTANCE_TREE-1	+
   184 00,20F6 F0 02		 seq$20FA	#DISTANCE_TREE-1	+
   184 00,20F8 69 0E		 adc	#DISTANCE_TREE-1	+
   185 00,20FA 9D 95 39 E8		sta	endCodeLength,x+
   186 00,20FE E4 F9			cpx	inflateDynamicBlock_nd
   187 00,2100 90 EF			bcc	inflateDynamicBlock_7
   188 00,2102 7E 95 39			ror	endCodeLength,x	+
   189
   190 				* inflateCodes
   191 				; Decompress data block basing on given Huffman trees
   192 00,2105			inflateCodes
   193 00,2105 20 49 21			jsr	buildHuffmanTree
   194 00,2108			inflateCodes_1
   195 00,2108 20 E0 21			jsr	fetchPrimaryCode
   196 00,210B B0 0D			bcs	inflateCodes_2
   197 				; Literal code
   198 00,210D A0 00		        ldy     #0
   199 00,210F 91 F2			sta	(outputPointer),y
   200 00,2111 E6 F2			inc	outputPointer
   201 00,2113 D0 F3			bne	inflateCodes_1
   202 00,2115 E6 F3			inc	outputPointer+1
   203 00,2117 90 EF			bcc	inflateCodes_1	!
   204 				; End of block
   205 00,2119			inflateCodes_ret
   206 00,2119 60			rts
   207 00,211A			inflateCodes_2
   208 00,211A F0 FD			beq	inflateCodes_ret
   209 				; Repeat block
   210 00,211C 20 02 22			jsr	getValue
   211 00,211F 85 F8			sta	moveBlock_len
   212 00,2121 98			tya
   213 00,2122 20 0F 22			jsr	getBits
   214 00,2125 85 F9			sta	moveBlock_len+1
   215 00,2127 A2 0F			ldx	#DISTANCE_TREE
   216 00,2129 20 E2 21			jsr	fetchCode
   217 00,212C 20 02 22			jsr	getValue
   218 00,212F 38			sec
   219 00,2130 49 FF			eor	#$ff
   220 00,2132 65 F2			adc	outputPointer
   221 00,2134 85 F4			sta	inflateCodes_src
   222 00,2136 08			php
   223 00,2137 98			tya
   224 00,2138 20 0F 22			jsr	getBits
   225 00,213B 28			plp
   226 00,213C 49 FF			eor	#$ff
   227 00,213E 65 F3			adc	outputPointer+1
   228 00,2140 85 F5			sta	inflateCodes_src+1
   229 00,2142 A2 F4			ldx	#inflateCodes_src
   230 00,2144 20 44 20			jsr	moveBlock
   231 00,2147 F0 BF			beq	inflateCodes_1	!
   232
   233 				* buildHuffmanTree
   234 				; Build Huffman trees basing on code lengths.
   235 				; Lengths (in bits) are stored in *CodeLength tables.
   236 				; A byte with highest bit set marks end of length table.
   237 00,2149			buildHuffmanTree
   238 					mwa	#literalCodeLength	buildHuffmanTree_src
Macro: MWA [Source: f:\!atari\macro\xasm.mac]
    36 00,2149 A9 95		      ldA <LITERALCODELENGTH
    37 00,214B 85 F4		      stA BUILDHUFFMANTREE_SRC
    38 00,214D A9 38		      ldA >LITERALCODELENGTH
    39 00,214F 85 F5		      stA BUILDHUFFMANTREE_SRC+1
Source: F:\!Atari\getris2\intro3\inflate.asm
   239 				; Clear bitsCount and bitsPointer_l
   240 00,2151 A0 3D			ldy	#2*TREES_SIZE+1
   241 00,2153 A9 00			lda	#0
   242 					sta:rne	bitsCount-1,y-
   242 00,2155 99 D3 39 88	 sta	bitsCount-1,y-
   242 00,2159 D0 FA		 rne$2155	bitsCount-1,y-
   243 00,215B F0 09			beq	buildHuffmanTree_3	!
   244 				; Count number of codes of each length
   245 00,215D			buildHuffmanTree_2
   246 00,215D AA			tax
   247 00,215E FE F2 39			inc	bitsPointer_l,x
   248 00,2161 C8			iny
   249 00,2162 D0 02			bne	buildHuffmanTree_3
   250 00,2164 E6 F5			inc	buildHuffmanTree_src+1
   251 00,2166			buildHuffmanTree_3
   252 00,2166 B1 F4			lda	(buildHuffmanTree_src),y
   253 00,2168 10 F3			bpl	buildHuffmanTree_2
   254 				; Calculate pointer for each length
   255 00,216A A2 00			ldx	#0
   256 00,216C A9 2F			lda	#<sortedCodes
   257 00,216E A0 3A			ldy	#>sortedCodes
   258 00,2170 18			clc
   259 00,2171			buildHuffmanTree_4
   260 00,2171 9D F2 39			sta	bitsPointer_l,x
   261 					tya:sta	bitsPointer_h,x
   261 00,2174 98		 tya	bitsPointer_h,x
   261 00,2175 9D 11 3A		 sta	bitsPointer_h,x
   262 00,2178 BD F3 39			lda	bitsPointer_l+1,x
   263 00,217B 7D F2 39			adc	bitsPointer_l,x	-
   264 					scc:iny
   264 00,217E 90 01		 scc$2181
   264 00,2180 C8		 iny
   265 00,2181 E8			inx
   266 00,2182 E0 1E			cpx	#TREES_SIZE
   267 00,2184 90 EB			bcc	buildHuffmanTree_4
   268 					mva	#>literalCodeLength	buildHuffmanTree_src+1
Macro: MVA [Source: f:\!atari\macro\xasm.mac]
     5 00,2186 A9 38		 ldA #>LITERALCODELENGTH
     6 00,2188 85 F5		 stA BUILDHUFFMANTREE_SRC+1
Source: F:\!Atari\getris2\intro3\inflate.asm
Source: F:\!Atari\getris2\intro3\inflate.asm
   269 00,218A A0 00			ldy	#0
   270 00,218C B0 27			bcs	buildHuffmanTree_9	!
   271 				; Put codes into their place in sorted table
   272 00,218E			buildHuffmanTree_6
   273 00,218E F0 15			beq	buildHuffmanTree_7
   274 00,2190 AA			tax
   275 					mva	bitsPointer_l-1,x	buildHuffmanTree_ptr
Macro: MVA [Source: f:\!atari\macro\xasm.mac]
     5 00,2191 BD F1 39		 ldA BITSPOINTER_L-1,X
     6 00,2194 85 F6		 stA BUILDHUFFMANTREE_PTR
Source: F:\!Atari\getris2\intro3\inflate.asm
Source: F:\!Atari\getris2\intro3\inflate.asm
   276 					mva	bitsPointer_h-1,x	buildHuffmanTree_ptr+1
Macro: MVA [Source: f:\!atari\macro\xasm.mac]
     5 00,2196 BD 10 3A		 ldA BITSPOINTER_H-1,X
     6 00,2199 85 F7		 stA BUILDHUFFMANTREE_PTR+1
Source: F:\!Atari\getris2\intro3\inflate.asm
Source: F:\!Atari\getris2\intro3\inflate.asm
   277 00,219B 98			tya
   278 					ldy:inc	bitsCount-1,x
   278 00,219C BC D3 39		 ldy	bitsCount-1,x
   278 00,219F FE D3 39		 inc	bitsCount-1,x
   279 00,21A2 91 F6			sta	(buildHuffmanTree_ptr),y
   280 00,21A4 A8			tay
   281 00,21A5			buildHuffmanTree_7
   282 00,21A5 C8			iny
   283 00,21A6 D0 0D			bne	buildHuffmanTree_9
   284 00,21A8 E6 F5			inc	buildHuffmanTree_src+1
   285 00,21AA A2 0E			ldx	#MAX_BITS-1
   286 					mva:rpl	bitsCount,x	literalCount,x-
   286 				 mva	bitsCount,x	literalCount,x-
Macro: MVA [Source: f:\!atari\macro\xasm.mac]
   290 00,21AC BD D4 39		 ldA BITSCOUNT,X
   291 00,21AF 9D 95 38 CA	 stA LITERALCOUNT,X-
Source: F:\!Atari\getris2\intro3\inflate.asm
Source: F:\!Atari\getris2\intro3\inflate.asm
   286 00,21B3 10 F7		 rpl$21AC	bitsCount,x	literalCount,x-
   287 00,21B5			buildHuffmanTree_9
   288 00,21B5 B1 F4			lda	(buildHuffmanTree_src),y
   289 00,21B7 10 D5			bpl	buildHuffmanTree_6
   290 00,21B9 60			rts
   291
   292 				* getNextLength
   293 				; Get next code length basing on temporary codes
   294 00,21BA			getNextLength
   295 00,21BA 86 F5			stx	getNextLength_index
   296 00,21BC 88			dey
   297 00,21BD D0 1A			bne	getNextLength_1
   298 				; Fetch a temporary code
   299 00,21BF 20 E0 21			jsr	fetchPrimaryCode
   300 				; Temporary code 0..15: put this length
   301 00,21C2 A0 01			ldy	#1
   302 00,21C4 C9 10			cmp	#16
   303 00,21C6 90 13			bcc	getNextLength_2
   304 				; Temporary code 16: repeat last length 3 + getBits(2) times
   305 				; Temporary code 17: put zero length 3 + getBits(3) times
   306 				; Temporary code 18: put zero length 11 + getBits(7) times
   307 00,21C8 A8			tay
   308 00,21C9 BE 4D 22			ldx	tempExtraBits-16,y
   309 00,21CC B9 4A 22			lda	tempBaseValue-16,y
   310 00,21CF 20 0F 22			jsr	getBits
   311 00,21D2 C0 11			cpy	#17
   312 00,21D4 A8			tay
   313 00,21D5 A9 00			lda	#0
   314 00,21D7 B0 02			bcs	getNextLength_2
   315 00,21D9			getNextLength_1
   316 00,21D9 A5 F4			lda	getNextLength_last
   317 00,21DB			getNextLength_2
   318 00,21DB 85 F4			sta	getNextLength_last
   319 00,21DD A6 F5			ldx	getNextLength_index
   320 00,21DF 60			rts
   321
   322 				* fetchPrimaryCode
   323 				; Read code basing on primary tree
   324 00,21E0			fetchPrimaryCode
   325 00,21E0 A2 00			ldx	#PRIMARY_TREE
   326
   327 				* fetchCode
   328 				; Read code from input stream basing on tree given in X.
   329 				; Return low byte of code in A.
   330 				; For literal/length tree C is set if non-literal code.
   331 00,21E2			fetchCode
   332 00,21E2 A9 00			lda	#0
   333 00,21E4			fetchCode_1
   334 00,21E4 20 2C 22			jsr	getBit
   335 00,21E7 2A			rol	@
   336 00,21E8 E8			inx
   337 					sub	bitsCount-1,x
Macro: SUB [Source: f:\!atari\macro\xasm.mac]
     5 00,21E9 38		 sec
     6 00,21EA FD D3 39		 sbc BITSCOUNT-1,X
Source: F:\!Atari\getris2\intro3\inflate.asm
   338 00,21ED B0 F5			bcs	fetchCode_1
   339 00,21EF 7D D3 39			adc	bitsCount-1,x	-
   340 00,21F2 DD 94 38			cmp	literalCount-1,x
   341 00,21F5 85 F6			sta	fetchCode_ptr
   342 00,21F7 BC F1 39			ldy	bitsPointer_l-1,x
   343 					mva	bitsPointer_h-1,x	fetchCode_ptr+1
Macro: MVA [Source: f:\!atari\macro\xasm.mac]
     5 00,21FA BD 10 3A		 ldA BITSPOINTER_H-1,X
     6 00,21FD 85 F7		 stA FETCHCODE_PTR+1
Source: F:\!Atari\getris2\intro3\inflate.asm
Source: F:\!Atari\getris2\intro3\inflate.asm
   344 00,21FF B1 F6			lda	(fetchCode_ptr),y
   345 00,2201 60			rts
   346
   347 				* getValue
   348 				; Read low byte of value (length or distance), basing on code A
   349 00,2202			getValue
   350 00,2202 A8			tay
   351 00,2203 BE D5 22			ldx	lengthExtraBits-1,y
   352 					lda:pha	lengthBaseValue_l-1,y
   352 00,2206 B9 5F 22		 lda	lengthBaseValue_l-1,y
   352 00,2209 48		 pha	lengthBaseValue_l-1,y
   353 					lda:tay	lengthBaseValue_h-1,y
   353 00,220A B9 9A 22		 lda	lengthBaseValue_h-1,y
   353 00,220D A8		 tay	lengthBaseValue_h-1,y
   354 00,220E 68			pla
   355
   356 				* getBits
   357 				; Read X-bit number from input stream and add it to A.
   358 				; In case of carry, Y is incremented.
   359 				; If X > 8, only 8 bits are read.
   360 				; On return X holds number of unread bits: X = (X > 8 ? X - 8 : 0);
   361 00,220F			getBits
   362 00,220F E0 00			cpx	#0
   363 00,2211 F0 18			beq	getBits_ret
   364 00,2213 48			pha
   365 					mva	#1	getBits_tmp
Macro: MVA [Source: f:\!atari\macro\xasm.mac]
     5 00,2214 A9 01		 ldA #1
     6 00,2216 85 F6		 stA GETBITS_TMP
Source: F:\!Atari\getris2\intro3\inflate.asm
Source: F:\!Atari\getris2\intro3\inflate.asm
   366 00,2218 68			pla
   367 00,2219			getBits_1
   368 00,2219 20 2C 22			jsr	getBit
   369 00,221C 90 06			bcc	getBits_2
   370 					add	getBits_tmp
Macro: ADD [Source: f:\!atari\macro\xasm.mac]
     5 00,221E 18		 clc
     6 00,221F 65 F6		 adc GETBITS_TMP
Source: F:\!Atari\getris2\intro3\inflate.asm
   371 					scc:iny
   371 00,2221 90 01		 scc$2224
   371 00,2223 C8		 iny
   372 00,2224			getBits_2
   373 00,2224 CA			dex
   374 00,2225 F0 04			beq	getBits_ret
   375 00,2227 06 F6			asl	getBits_tmp
   376 00,2229 90 EE			bcc	getBits_1
   377 00,222B			getBits_ret
   378 00,222B 60			rts
   379
   380 				* getBit
   381 				; Read single bit from input stream, returns it in C flag
   382 00,222C			getBit
   383 00,222C 46 FA			lsr	getBit_hold
   384 00,222E D0 13			bne	getBit_ret
   385 00,2230 48			pha
   386 					tya:pha
   386 00,2231 98		 tya
   386 00,2232 48		 pha
   387 00,2233 A0 00			ldy     #0
   388 00,2235 B1 F0			lda	(inputPointer),y
   389 					inw	inputPointer
Macro: INW [Source: f:\!atari\macro\xasm.mac]
     5 00,2237 E6 F0		 inc INPUTPOINTER
     6 00,2239 D0 02		 bne skip
     7 00,223B E6 F1		 inc INPUTPOINTER+1
     8 00,223D			skip
Source: F:\!Atari\getris2\intro3\inflate.asm
   390 00,223D 6A			ror	@	+
   391 00,223E 85 FA			sta	getBit_hold
   392 					pla:tay
   392 00,2240 68		 pla
   392 00,2241 A8		 tay
   393 00,2242 68			pla
   394 00,2243			getBit_ret
   395 00,2243 EE 1A D0			inc $d01a
   396 00,2246 60			rts
   397
   398 				* Tables for temporary codes
   399 				; Value is BaseValue + getBits(ExtraBits)
   400
   401 				; Order, in which lengths of temporary codes are stored
   402 00,2247			tempCodeLengthOrder
   403 00,2247 10 11 12 00 08 +		dta	b(16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15)
   404
   405 				; Base values
   406 00,225A			tempBaseValue
   407 00,225A 03 03 0B			dta	b(3,3,11)
   408
   409 				; Number of extra bits to read
   410 00,225D			tempExtraBits
   411 00,225D 02 03 07			dta	b(2,3,7)
   412
   413 				* Tables for length and distance codes
   414 				; Value is BaseValue + getBits(ExtraBits)
   415
   416 				; Base values
   417 00,2260			lengthBaseValue_l
   418 00,2260 03 04 05 06 07 +		dta	l(3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43)
   419 00,2272 33 3B 43 53 63 +		dta	l(51,59,67,83,99,115,131,163,195,227,258)
   420 00,227D			distanceBaseValue_l
   421 00,227D 01 02 03 04 05 +		dta	l(1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385)
   422 00,228F 01 01 01 01 01 +		dta	l(513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577)
   423 00,229B			lengthBaseValue_h
   424 00,229B 00 00 00 00 00 +		dta	h(3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43)
   425 00,22AD 00 00 00 00 00 +		dta	h(51,59,67,83,99,115,131,163,195,227,258)
   426 00,22B8			distanceBaseValue_h
   427 00,22B8 00 00 00 00 00 +		dta	h(1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385)
   428 00,22CA 02 03 04 06 08 +		dta	h(513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577)
   429
   430 				; Number of extra bits to read
   431 00,22D6			lengthExtraBits
   432 00,22D6 00 00 00 00 00 +		dta	b(0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4)
   433 00,22EC 04 04 05 05 05 +		dta	b(4,4,5,5,5,5,0)
   434 00,22F3			distanceExtraBits
   435 00,22F3 00 00 00 00 01 +		dta	b(0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10)
   436 00,230B 0B 0B 0C 0C 0D +		dta	b(11,11,12,12,13,13)
   437
   438
   439 = 00,3895		literalCount equ buffer
   440 = 00,3895		literalCodeLength equ literalCount
   441 = 00,3995		endCodeLength equ literalCodeLength+256
   442 = 00,3996		lengthCodeLength equ endCodeLength+1
   443 = 00,39B3		distanceCodeLength equ lengthCodeLength+29
   444 = 00,39D4		bitsCount equ distanceCodeLength+33
   445 = 00,39F2		bitsPointer_l equ bitsCount+TREES_SIZE
   446 = 00,3A11		bitsPointer_h equ bitsPointer_l+TREES_SIZE+1
   447 = 00,3A2F		sortedCodes equ bitsPointer_h+TREES_SIZE
   448 				*	org	*+256+1+29+30+2
    15
    16
    17 00,2311			pack
    18 00,2311 ED DC 7B 58 53 +	 ins 'intro3.def'
    19
    20 00,3895			buffer 
    21
    22 00,02E2-02E3> 00 20	 ini main
    23
Source: f:\!atari\macro\xasm.mac
